class Format : Any
{
    maide prudate Bool Init()
    {
        base.Init();
        this.InfraInfra : share InfraInfra;
        this.TextInfra : share Infra;

        this.InitCountState();
        this.InitResultState();
        return true;
    }

    field prudate CharForm CharForm { get { return data; } set { data : value; } }
    field precate InfraInfra InfraInfra { get { return data; } set { data : value; } }
    field precate Infra TextInfra { get { return data; } set { data : value; } }
    field precate Int KindCount { get { return 5; } set { } }
    field precate Array CountState { get { return data; } set { data : value; } }
    field precate Array ResultState { get { return data; } set { data : value; } }
    field precate Array Array { get { return data; } set { data : value; } }
    field precate Int ArrayIndex { get { return data; } set { data : value; } }

    maide precate Bool InitCountState()
    {
        this.CountState : new Array;
        this.CountState.Count : this.KindCount;
        this.CountState.Init();

        this.Array : this.CountState;
        this.ArrayIndex : 0;

        this.CountStateAdd(new BoolFormatCountState);
        this.CountStateAdd(new IntFormatCountState);
        this.CountStateAdd(new SIntFormatCountState);
        this.CountStateAdd(new TextFormatCountState);
        this.CountStateAdd(new CharFormatCountState);
        return true;
    }

    maide precate Bool InitResultState()
    {
        this.ResultState : new Array;
        this.ResultState.Count : this.KindCount;
        this.ResultState.Init();

        this.Array : this.ResultState;
        this.ArrayIndex : 0;

        this.ResultStateAdd(new BoolFormatResultState);
        this.ResultStateAdd(new IntFormatResultState);
        this.ResultStateAdd(new SIntFormatResultState);
        this.ResultStateAdd(new TextFormatResultState);
        this.ResultStateAdd(new CharFormatResultState);
        return true;
    }

    maide precate Bool CountStateAdd(var FormatCountState state)
    {
        state.Format : this;
        state.Init();
        this.ArrayAdd(state);
        return true;
    }

    maide precate Bool ResultStateAdd(var FormatResultState state)
    {
        state.Format : this;
        state.Init();
        this.ArrayAdd(state);
        return true;
    }

    maide precate Bool ArrayAdd(var Any item)
    {
        var Int index;
        index : this.ArrayIndex;
        this.Array.SetAt(index, item);
        index : index + 1;
        this.ArrayIndex : index;
        return true;
    }

    maide prudate Int ExecuteCount(var Text varBase, var Array argList)
    {
        var Int count;
        count : argList.Count;
        var Int k;
        k : 0;
        var Int i;
        i : 0;
        while (i < count)
        {
            var FormatArg arg;
            arg : cast FormatArg(argList.GetAt(i));
            
            inf (!arg.HasCount)
            {
                this.ExecuteArgCount(arg);
            }

            var Int ka;
            ka : arg.Count;

            k : k + ka;

            i : i + 1;
        }

        var Int baseCount;
        baseCount : varBase.Range.Count;

        k : k + baseCount;

        var Int a;
        a : k;
        return a;
    }

    maide prudate Bool ExecuteResult(var Text varBase, var Array argList, var Text result)
    {
        var Infra textInfra;
        textInfra : this.TextInfra;
        inf (!textInfra.ValidRange(varBase))
        {
            return false;
        }
        inf (!textInfra.ValidRange(result))
        {
            return false;
        }

        var Data baseData;
        baseData : varBase.Data;
        var Range baseRange;
        baseRange : varBase.Range;
        var Int baseStart;
        baseStart : baseRange.Index;
        var Int baseCount;
        baseCount : baseRange.Count;

        var Int argCount;
        argCount : argList.Count;

        var Data resultData;
        resultData : result.Data;
        var Range resultRange;
        resultRange : result.Range;
        var Int resultStart;
        resultStart : resultRange.Index;
        var Int resultCount;
        resultCount : resultRange.Count;

        var Int count;
        count : baseCount + 1;
        var Int resultIndex;
        resultIndex : 0;
        var Int argIndex;
        argIndex : 0;
        var Int i;
        i : 0;
        while (i < count)
        {
            var Bool b;
            b : false;

            while ((!b) & (argIndex < argCount))
            {
                var FormatArg arg;
                arg : cast FormatArg(argList.GetAt(argIndex));

                var Int k;
                k : arg.Pos;

                var Bool ba;
                ba : (i = k);
                inf (ba)
                {
                    var Int countA;
                    countA : arg.Count;

                    var Int oa;
                    oa : resultStart + resultIndex;
                    resultRange.Index : oa;
                    resultRange.Count : countA;
                    
                    this.ExecuteArgResult(arg, result);

                    resultRange.Index : resultStart;
                    resultRange.Count : resultCount;

                    resultIndex : resultIndex + countA;

                    argIndex : argIndex + 1;
                }
                inf (!ba)
                {
                    b : true;
                }
            }

            inf (!(i = baseCount))
            {
                var Int oc;
                oc : textInfra.DataCharGet(baseData, baseStart + i);

                textInfra.DataCharSet(resultData, resultStart + resultIndex, oc);
                
                resultIndex : resultIndex + 1;
            }

            i : i + 1;
        }
        return true;
    }

    maide prudate Bool ExecuteArgCount(var FormatArg arg)
    {
        inf (!this.ValidArg(arg))
        {
            return false;
        }

        int kind;
        kind = arg.Kind;
        FormatCountState state;
        state = (FormatCountState)this.CountState.GetAt(kind);

        state.Arg = arg;
        state.Execute();

        Value aa;
        aa = (Value)state.Result;

        int valueCount;
        valueCount = aa.Mid;

        int fieldWidth;
        fieldWidth = arg.FieldWidth;

        int maxWidth;
        maxWidth = arg.MaxWidth;

        long u;
        u = maxWidth;
        u = u << 4;
        u = u >> 4;

        int count;
        count = valueCount;

        if (count < fieldWidth)
        {
            count = fieldWidth;
        }

        if (!(u == -1))
        {
            if (maxWidth < count)
            {
                count = maxWidth;
            }
        }

        arg.HasCount = true;
        arg.ValueCount = valueCount;
        arg.Count = count;
        return true;
    }

    public virtual bool ExecuteArgResult(FormatArg arg, Text result)
    {
        if (!this.ValidArg(arg))
        {
            return false;
        }
        if (!this.TextInfra.ValidRange(result))
        {
            return false;
        }
        if (result.Range.Count < arg.Count)
        {
            return false;
        }

        int kind;
        kind = arg.Kind;
        FormatResultState state;
        state = (FormatResultState)this.ResultState.GetAt(kind);

        state.Arg = arg;
        state.ArgResult = result;
        state.Execute();
        return true;
    }

    public virtual bool ResultBool(Text result, bool value, int varCase, int valueWriteCount, int valueStart, int valueIndex)
    {
        Infra textInfra;
        textInfra = this.TextInfra;

        CharForm charForm;
        charForm = this.CharForm;

        Data destData;
        destData = result.Data;
        int destStart;
        destStart = result.Range.Index;

        string source;
        source = null;
        if (!value)
        {
            source = textInfra.BoolFalseString;
        }
        if (value)
        {
            source = textInfra.BoolTrueString;
        }

        int destIndex;
        destIndex = destStart + valueStart;
        char ouc;
        ouc = (char)0;
        char oc;
        oc = (char)0;
        int aa;
        aa = 0;
        int index;
        index = 0;
        int count;
        count = valueWriteCount;
        int i;
        i = 0;
        while (i < count)
        {
            index = i + valueIndex;

            ouc = source[index];
            aa = ouc;

            if (varCase == 1)
            {
                if (index == 0)
                {
                    aa = ouc - 'a' + 'A';
                }
            }
            if (varCase == 2)
            {
                aa = ouc - 'a' + 'A';
            }
            oc = (char)aa;

            oc = (char)charForm.Execute(oc);

            textInfra.DataCharSet(destData, destIndex + i, oc);

            i = i + 1;
        }
        return true;
    }

    public virtual bool ResultInt(Text result, ulong value, int varBase, int varCase, int valueCount, int valueWriteCount, int valueStart, int valueIndex)
    {
        Infra textInfra;
        textInfra = this.TextInfra;

        CharForm charForm;
        charForm = this.CharForm;

        Data destData;
        destData = result.Data;
        int destStart;
        destStart = result.Range.Index;

        int destIndex;
        destIndex = destStart + valueStart;

        if (value == 0)
        {
            if (!(valueWriteCount == 0))
            {
                char occ;
                occ = '0';

                occ = (char)charForm.Execute(occ);

                textInfra.DataCharSet(destData, destIndex, occ);
            }
            return true;
        }

        int end;
        end = valueIndex + valueWriteCount;

        bool upperCase;
        upperCase = !(varCase == 0);
        char letterDigitStart;
        letterDigitStart = 'a';
        if (upperCase)
        {
            letterDigitStart = 'A';
        }
        ulong ca;
        ca = (ulong)varBase;
        ulong k;
        k = value;
        ulong j;
        j = 0;
        ulong ka;
        ka = 0;
        int digit;
        digit = 0;
        int oa;
        oa = 0;
        char c;
        c = (char)0;

        int index;
        index = 0;
        int count;
        count = valueCount;
        int i;
        i = 0;
        while (i < count)
        {
            j = k / ca;

            index = count - 1 - i;

            if ((!(index < valueIndex)) & index < end)
            {
                ka = k - j * ca;

                digit = (int)ka;

                c = textInfra.DigitChar(digit, letterDigitStart);

                c = (char)charForm.Execute(c);

                oa = index - valueIndex;

                textInfra.DataCharSet(destData, destIndex + oa, c);
            }

            k = j;

            i = i + 1;
        }
        return true;
    }

    public virtual bool ResultText(Text result, Text value, int varCase, int valueWriteCount, int valueStart, int valueIndex)
    {
        Infra textInfra;
        textInfra = this.TextInfra;

        CharForm charForm;
        charForm = this.CharForm;

        Data sourceData;
        sourceData = value.Data;
        int sourceStart;
        sourceStart = value.Range.Index;

        Data destData;
        destData = result.Data;
        int destStart;
        destStart = result.Range.Index;

        int sourceIndex;
        sourceIndex = sourceStart + valueIndex;
        int destIndex;
        destIndex = destStart + valueStart;
        char ouc;
        ouc = (char)0;
        char oc;
        oc = (char)0;
        int aa;
        aa = 0;
        int count;
        count = valueWriteCount;
        int i;
        i = 0;
        while (i < count)
        {
            ouc = textInfra.DataCharGet(sourceData, sourceIndex + i);

            aa = ouc;

            if (varCase == 1)
            {
                if (textInfra.IsLetter(ouc, true))
                {
                    aa = ouc - 'A' + 'a';
                }
            }
            if (varCase == 2)
            {
                if (textInfra.IsLetter(ouc, false))
                {
                    aa = ouc - 'a' + 'A';
                }
            }
            oc = (char)aa;

            oc = (char)charForm.Execute(oc);

            textInfra.DataCharSet(destData, destIndex + i, oc);

            i = i + 1;
        }
        return true;
    }

    public virtual bool ResultFill(Text dest, int fillIndex, int fillCount, char fillChar)
    {
        Infra textInfra;
        textInfra = this.TextInfra;
        Data destData;
        destData = dest.Data;
        int destStart;
        destStart = dest.Range.Index;
        int destIndex;
        destIndex = destStart + fillIndex;
        int index;
        index = 0;
        int count;
        count = fillCount;
        int i;
        i = 0;
        while (i < count)
        {
            index = destIndex + i;
            textInfra.DataCharSet(destData, index, fillChar);
            i = i + 1;
        }
        return true;
    }

    public virtual int IntDigitCount(ulong value, int varBase)
    {
        int digitCount;
        digitCount = 0;

        ulong ca;
        ca = (ulong)varBase;
        ulong oa;
        oa = value;
        while (0 < oa)
        {
            oa = oa / ca;
            digitCount = digitCount + 1;
        }

        if (digitCount == 0)
        {
            digitCount = 1;
        }

        int a;
        a = digitCount;
        return a;
    }

    protected virtual bool ValidArg(FormatArg arg)
    {
        int kind;
        kind = arg.Kind;

        if (!this.ValidKind(kind))
        {
            return false;
        }

        if (kind == 1 | kind == 2)
        {
            if (!this.ValidIntBase(arg.Base))
            {
                return false;
            }
        }
        if (kind == 3)
        {
            if (arg.ValueText == null)
            {
                return false;
            }
            if (!this.TextInfra.ValidRange(arg.ValueText))
            {
                return false;
            }
        }
        return true;
    }

    protected virtual bool ValidKind(int kind)
    {
        return this.InfraInfra.ValidIndex(this.KindCount, kind);
    }

    protected virtual bool ValidIntBase(int varBase)
    {
        return !(varBase < 2 | 16 < varBase);
    }
}