class Infra : Any
{
    maide prudate Bool Init()
    {
        base.Init();
        this.InfraInfra : share InfraInfra;
        this.TextInfra : share TextInfra;
        this.StorageStatusList : share StatusList;
        this.TextEncodeKindList : share TextEncodeKindList;
        this.TextSlash : this.TextInfra.TextCreateStringData("/", null);
        this.TextDot : this.TextInfra.TextCreateStringData(".", null);
        this.TextColon : this.TextInfra.TextCreateStringData(":", null);
        return true;
    }

    field prudate TextText TextSlash { get { return data; } set { data : value; } }
    field prudate TextText TextDot { get { return data; } set { data : value; } }
    field prudate TextText TextColon { get { return data; } set { data : value; } }
    field precate InfraInfra InfraInfra { get { return data; } set { data : value; } }
    field precate TextInfra TextInfra { get { return data; } set { data : value; } }
    field precate StatusList StorageStatusList { get { return data; } set { data : value; } }
    field precate TextEncodeKindList TextEncodeKindList { get { return data; } set { data : value; } }

    maide prudate Data DataRead(var String filePath)
    {
        return this.DataReadAny(filePath, false);
    }

    maide prudate Data DataReadAny(var String filePath, var Bool anyNode)
    {
        var Storage storage;
        storage : new Storage;
        storage.Init();
        storage.AnyNode : anyNode;

        var Mode mode;
        mode : new Mode;
        mode.Init();
        mode.Read : true;

        storage.Path : filePath;
        storage.Mode : mode;
        storage.Open();

        var Data o;
        inf (storage.Status = this.StorageStatusList.NoError)
        {
            var StreamStream stream;
            stream : storage.Stream;

            var Int count;
            count : stream.Count;
            var Data data;
            data : new Data;
            data.Count : count;
            data.Init();
            var Range range;
            range : new Range;
            range.Init();
            range.Index : 0;
            range.Count : count;

            stream.Read(data, range);
            inf (stream.Status = 0)
            {
                o : data;
            }
        }
        storage.Close();
        storage.Final();
        return o;
    }

    maide prudate Bool DataWrite(var String filePath, var Data data)
    {
        return this.DataWriteAny(filePath, data, false);
    }

    maide prudate Bool DataWriteAny(var String filePath, var Data data, var Bool anyNode)
    {
        var Range range;
        range : new Range;
        range.Init();
        range.Index : 0;
        range.Count : data.Count;
        return this.DataWriteRangeAny(filePath, data, range, anyNode);
    }

    maide prudate Bool DataWriteRange(var String filePath, var Data data, var Range range)
    {
        return this.DataWriteRangeAny(filePath, data, range, false);
    }

    maide prudate Bool DataWriteRangeAny(var String filePath, var Data data, var Range range, var Bool anyNode)
    {
        var Storage storage;
        storage : new Storage;
        storage.Init();
        storage.AnyNode : anyNode;

        var Mode mode;
        mode : new Mode;
        mode.Init();
        mode.Write : true;

        storage.Path : filePath;
        storage.Mode : mode;
        storage.Open();

        var Bool o;
        o : false;
        inf (storage.Status = this.StorageStatusList.NoError)
        {
            var StreamStream stream;
            stream : storage.Stream;
            stream.Write(data, range);
            inf (stream.Status = 0)
            {
                o = true;
            }
        }
        storage.Close();
        storage.Final();
        return o;
    }

    maide prudate String TextRead(var String filePath)
    {
        return this.TextReadAny(filePath, false);
    }

    maide prudate String TextReadAny(var String filePath, var Bool anyNode)
    {
        var Data data;
        data : this.DataReadAny(filePath, anyNode);
        inf (data = null)
        {
            return null;
        }
        var TextEncode encode;
        encode : new TextEncode;
        encode.Kind : this.TextEncodeKindList.Utf8;
        encode.Init();

        var Int ka;
        ka : encode.TextCountMax(data.Count);

        var TextText text;
        text : this.TextInfra.TextCreate(ka);
        var Range range;
        range : new Range;
        range.Init();
        range.Index : 0;
        range.Count : data.Count;
        var Int kb;
        kb : encode.Text(text, data, range);

        encode.Final();

        var Int count;
        count : kb;

        text.Range.Count : count;

        var String a;
        a : this.TextInfra.StringCreate(text);
        return a;
    }

    maide prudate Bool TextWrite(var String filePath, var String text)
    {
        return this.TextWriteAny(filePath, text, false);
    }

    maide prudate Bool TextWriteAny(var String filePath, var String text, var Bool anyNode)
    {
        var TextEncode encode;
        encode : new TextEncode;
        encode.Kind : this.TextEncodeKindList.Utf8;
        encode.Init();

        var TextText o;
        o : this.TextInfra.TextCreateString(text, null);
        var Int kk;
        kk : o.Range.Count;
        var Int ka;
        ka : encode.DataCountMax(kk);

        var Data data;
        data : new Data;
        data.Count : ka;
        data.Init();

        var Int kb;
        kb : encode.Data(data, 0, o);

        encode.Final();

        var Int count;
        count : kb;
        var Range range;
        range : new Range;
        range.Init();
        range.Index : 0;
        range.Count : count;
        var Bool a;
        a : this.DataWriteRangeAny(filePath, data, range, anyNode);
        return a;
    }

    maide prudate Bool CountSet(var String filePath, var Int value)
    {
        return this.CountSetAny(filePath, value, false);
    }

    maide prudate Bool CountSetAny(var String filePath, var Int value, var Bool anyNode)
    {
        var StatusList statusList;
        statusList : this.StorageStatusList;

        var Storage storage;
        storage : new Storage;
        storage.Init();
        storage.AnyNode : anyNode;

        var Mode mode;
        mode : new Mode;
        mode.Init();
        mode.Read : true;
        mode.Write : true;
        mode.Exist : true;

        storage.Path : filePath;
        storage.Mode : mode;
        storage.Open();

        var Bool o;
        o : false;
        inf (storage.Status = statusList.NoError)
        {
            storage.CountSet(value);
            inf (storage.Status = statusList.NoError)
            {
                o = true;
            }
        }
        storage.Close();
        storage.Final();
        return o;
    }

    maide prudate Int EntryPathNameCombine(var TextText entryPath, var Compare compare)
    {
        var Int a;
        a : this.TextInfra.LastIndex(entryPath, this.TextSlash, compare);
        return a;
    }

    maide prudate Int EntryNameExtensionDot(var TextText entryName, var Compare compare)
    {
        var Int a;
        a : this.TextInfra.LastIndex(entryName, this.TextDot, compare);
        return a;
    }

    maide prudate Bool IsRelativePath(var TextText entryPath, var Compare compare)
    {
        var TextInfra textInfra;
        textInfra : this.TextInfra;

        var Int k;
        k : textInfra.Index(entryPath, this.TextSlash, compare);
        inf (k = 0sn1)
        {
            return true;
        }

        inf (k = 0)
        {
            return false;
        }

        var Range range;
        range : entryPath.Range;

        var Int indexA;
        var Int countA;
        indexA : range.Index;
        countA : range.Count;

        var TextText colon;
        colon : this.TextColon;

        var Int colonCount;
        colonCount : colon.Range.Count;

        range.Index : indexA + k - colonCount;
        range.Count : colonCount;

        var Bool b;
        b : textInfra.Equal(entryPath, colon, compare);
        
        range.Index : indexA;
        range.Count : countA;

        var Bool a;
        a : !b;
        return a;
    }
}